AWSTemplateFormatVersion: 2010-09-09
Transform:
  - AWS::Serverless-2016-10-31

Description: "Storyteller"

Parameters:
  DomainName:
    Type: String
    Description: "The domain name of website"
    Default: "storyteller.daaru.dev"
  HostedZoneId:
    Type: String
    Description: "The Route53 hosted zone ID used for the domain"
    Default: "Z06243612S7YJAB0QOZB9"
  AcmCertificateArn:
    Type: String
    Description: "The certificate ARN for the domain name provided, must be in us-east-1 region"
    Default: "arn:aws:acm:us-east-1:597720084096:certificate/375e7ef9-d861-464f-8bd9-878d815bf836"
  CloudFrontPriceClass:
    Type: String
    Description: "The price class for CloudFront distribution"
    Default: "PriceClass_100"
    AllowedValues:
      - PriceClass_100
      - PriceClass_200
      - PriceClass_All
  DeveloperMode:
    Type: String
    Description: "Whether to allow localhost or not"
    Default: "ENABLED"
    AllowedValues:
      - "DISABLED"
      - "ENABLED"
  SsrCache:
    Type: String
    Description: "Whether to add cache to server side rendering"
    Default: "DISABLED"
    AllowedValues:
      - "DISABLED"
      - "ENABLED"
  GeminiModelId:
    Type: String
    Description: "Gemini model identifier"
    Default: "gemini-1.5-flash"
  GeminiApiKey:
    Type: String
    Description: "Gemini api key"
    Default: ""
    NoEcho: true
  AuthSecret:
    Type: String
    NoEcho: true
  OidcClientId:
    Type: String
    Description: "The OIDC client ID" 
  OidcClientSecret:
    Type: String
    Description: "The OIDC client secret" 
    NoEcho: true
  OidcEndpoint:
    Type: String
    Description: "The OIDC endpoint" 
    Default: "https://auth.daaru.dev"

Conditions:
  IsDomainProvided: !Not [!Equals [!Ref DomainName, ""]]
  IsHostedZoneIdProvided: !Not [!Equals [!Ref HostedZoneId, ""]]
  IsDeveloperModeEnabled: !Equals [!Ref DeveloperMode, "ENABLED"]
  IsSsrCacheEnabled: !Equals [!Ref SsrCache, "ENABLED"]

Globals:
  Function:
    Runtime: nodejs20.x
    Timeout: 6

Resources:

  ##
  # DNS records
  ##

  DnsRecord:
    Type: AWS::Route53::RecordSet
    Condition: IsHostedZoneIdProvided
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Ref DomainName
      Type: A
      AliasTarget:
        DNSName: !GetAtt Distribution.DomainName
        HostedZoneId: "Z2FDTNDATAQYW2" # CloudFront has a fixed hosted zone id

  ##
  # S3 bucket for static objects
  ##

  Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-${AWS::Region}"
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref Bucket
      PolicyDocument: 
        Statement: 
          - Effect: "Allow"
            Action: "s3:GetObject"
            Resource: !Sub "arn:aws:s3:::${Bucket}/*"
            Principal: 
              AWS: !Sub 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${OriginAccessIdentity}'

  MediaBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-${AWS::Region}-media"
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - 'Content-Type'
            AllowedMethods:
              - 'PUT'
            AllowedOrigins:
              - !If [IsDeveloperModeEnabled, "http://localhost:3000", !Ref AWS::NoValue] 
              - !Sub "https://${DomainName}"
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true
  
  MediaBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref MediaBucket
      PolicyDocument: 
        Statement: 
          - Effect: "Allow"
            Action: "s3:GetObject"
            Resource: !Sub "arn:aws:s3:::${MediaBucket}/*"
            Principal: 
              AWS: !Sub 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${OriginAccessIdentity}'

  ##
  # CloudFront CDN
  ##

  OriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Ref AWS::StackName

  Distribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: 'true'
        Comment: !Ref AWS::StackName
        HttpVersion: http2
        Origins:
          - Id: static
            DomainName: !Sub "${Bucket}.s3.${AWS::Region}.amazonaws.com"
            S3OriginConfig:
              OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${OriginAccessIdentity}
          - Id: media
            DomainName: !Sub "${MediaBucket}.s3.${AWS::Region}.amazonaws.com"
            S3OriginConfig:
              OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${OriginAccessIdentity}
          - Id: ssr
            DomainName: !Sub "${HttpApi}.execute-api.${AWS::Region}.amazonaws.com"
            OriginPath: ""
            OriginCustomHeaders:
              - HeaderName: X-OriginAccessIdentity
                HeaderValue: !Ref OriginAccessIdentity
            CustomOriginConfig:
              HTTPSPort: 443
              OriginProtocolPolicy: https-only
              OriginSSLProtocols: 
                - TLSv1.2
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          TargetOriginId: ssr
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad # CachingDisabled
          ViewerProtocolPolicy: redirect-to-https
          ResponseHeadersPolicyId: 67f7725c-6f97-4210-82d7-5512b31e9d03 # SecurityHeadersPolicy
        CacheBehaviors:
          - PathPattern: /_nuxt/*
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
            TargetOriginId: static
            CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 # CachingOptimized
            ViewerProtocolPolicy: redirect-to-https
            ResponseHeadersPolicyId: 67f7725c-6f97-4210-82d7-5512b31e9d03 # SecurityHeadersPolicy
          - PathPattern: /favicon.ico
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
            TargetOriginId: static
            CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 # CachingOptimized
            ViewerProtocolPolicy: redirect-to-https
            ResponseHeadersPolicyId: 67f7725c-6f97-4210-82d7-5512b31e9d03 # SecurityHeadersPolicy
          - PathPattern: /imgs/*
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
            TargetOriginId: static
            CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 # CachingOptimized
            ViewerProtocolPolicy: redirect-to-https
            ResponseHeadersPolicyId: 67f7725c-6f97-4210-82d7-5512b31e9d03 # SecurityHeadersPolicy
          - PathPattern: /robots.txt
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
            TargetOriginId: static
            CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 # CachingOptimized
            ViewerProtocolPolicy: redirect-to-https
            ResponseHeadersPolicyId: 67f7725c-6f97-4210-82d7-5512b31e9d03 # SecurityHeadersPolicy
          - PathPattern: /api/*
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
              - PUT
              - PATCH
              - POST
              - DELETE
            TargetOriginId: ssr
            CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad # CachingDisabled
            OriginRequestPolicyId: b689b0a8-53d0-40ab-baf2-68738e2966ac # AllViewerExceptHostHeader
            ViewerProtocolPolicy: redirect-to-https
            ResponseHeadersPolicyId: 67f7725c-6f97-4210-82d7-5512b31e9d03 # SecurityHeadersPolicy
          - PathPattern: /
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
            TargetOriginId: ssr
            CachePolicyId: !If [IsSsrCacheEnabled, 658327ea-f89d-4fab-a63d-7e88639e58f6, 4135ea2d-6df8-44a3-9df3-4b5a84be39ad] # CachingOptimized or CachingDisabled
            ViewerProtocolPolicy: redirect-to-https
            ResponseHeadersPolicyId: 67f7725c-6f97-4210-82d7-5512b31e9d03 # SecurityHeadersPolicy
          - PathPattern: /terms
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
            TargetOriginId: ssr
            CachePolicyId: !If [IsSsrCacheEnabled, 658327ea-f89d-4fab-a63d-7e88639e58f6, 4135ea2d-6df8-44a3-9df3-4b5a84be39ad] # CachingOptimized or CachingDisabled
            ViewerProtocolPolicy: redirect-to-https
            ResponseHeadersPolicyId: 67f7725c-6f97-4210-82d7-5512b31e9d03 # SecurityHeadersPolicy
          - PathPattern: /idea/*
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
            TargetOriginId: ssr
            CachePolicyId: !If [IsSsrCacheEnabled, 658327ea-f89d-4fab-a63d-7e88639e58f6, 4135ea2d-6df8-44a3-9df3-4b5a84be39ad] # CachingOptimized or CachingDisabled
            ViewerProtocolPolicy: redirect-to-https
            ResponseHeadersPolicyId: 67f7725c-6f97-4210-82d7-5512b31e9d03 # SecurityHeadersPolicy
          - PathPattern: /media/*
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
            TargetOriginId: media
            CachePolicyId: !If [IsSsrCacheEnabled, 658327ea-f89d-4fab-a63d-7e88639e58f6, 4135ea2d-6df8-44a3-9df3-4b5a84be39ad] # CachingOptimized or CachingDisabled
            ViewerProtocolPolicy: redirect-to-https
            ResponseHeadersPolicyId: 67f7725c-6f97-4210-82d7-5512b31e9d03 # SecurityHeadersPolicy
        PriceClass: !Ref CloudFrontPriceClass
        Aliases:
          - !If [IsDomainProvided, !Ref DomainName, !Ref AWS::NoValue]
        ViewerCertificate:
          AcmCertificateArn: !If [IsDomainProvided, !Ref AcmCertificateArn, !Ref AWS::NoValue]
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2021

  ##
  # Database
  ##

  DataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref AWS::StackName
      AttributeDefinitions:
        - AttributeName: entity
          AttributeType: S
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: entity
          KeyType: HASH
        - AttributeName: id
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST

  ##
  # HTTP API handler for SSR
  ##

  HttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      Name: !Ref AWS::StackName
      StageName: $default

  HttpApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Ref AWS::StackName
      CodeUri: .output/server/
      Handler: index.handler
      Architectures:
        - x86_64
      MemorySize: 512
      Timeout: 30
      Environment:
        Variables:
          OIDC_CLIENT_ID: !Ref OidcClientId
          OIDC_CLIENT_SECRET: !Ref OidcClientSecret
          OIDC_ENDPOINT: !Ref OidcEndpoint
          AUTH_SECRET: !Ref AuthSecret
          AUTH_ORIGIN: !If [IsDomainProvided, !Sub "https://${DomainName}/api/auth", !Sub "https://${Distribution.DomainName}/api/auth"]
          NUXT_DYNAMODB_TABLE_NAME: !Ref DataTable
          NUXT_S3_BUCKET_NAME: !Ref MediaBucket
          NUXT_EVENTS_BUS: "default"
          NUXT_EVENTS_SOURCE: !Ref AWS::StackName
      Policies: 
        - DynamoDBCrudPolicy:
            TableName: !Ref DataTable
        - S3CrudPolicy:
            BucketName: !Ref MediaBucket
        - Statement:
          - Effect: "Allow"
            Action: "bedrock:InvokeModel"
            Resource: "*"
        - EventBridgePutEventsPolicy:
            EventBusName: default
      Events:
        ProxyResource:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: $default
            Method: any

Outputs:
  S3Bucket:
    Description: "The S3 bucket that contains static files"
    Value: !Ref Bucket
  S3MediaBucket:
    Description: "The S3  bucket that contains uploaded media"
    Value: !Ref MediaBucket
  CloudFrontDistribution:
    Description: "The CloudFront distribution in front of the S3 bucket"
    Value: !Ref Distribution
  WebsiteUrl:
    Description: "The website URL"
    Value: !If [IsDomainProvided, !Sub "https://${DomainName}/", !Sub "https://${Distribution.DomainName}/"]
  ApplicationLog:
    Description: "The CloudWatch log group where application log are saved"
    Value: !Sub "/aws/lambda/${HttpApiFunction}"
